/***

    H E C K L I N G   A T   O N T O L O G I E S
    Asking what we can learn from comparing authorial and audience descriptions of the same media object.

	Saul Albert and Toby Harris
	Media & Arts Technology, Queen Mary University of London
	
	http://heckle.at/ontologies
	
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	This file: Javascript Processing 'sketch' to interactively visualise HAO data
	
	Code originally developed by Toby Harris as part of 'Digital Narratives at the BBC'
	http://tobyz.net/bbcstories
	
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Copyright (C) 2011 by Saul Albert and Toby Harris

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
    

***/

function sketch(p)
{
	//// SKETCH 'CONSTANTS'
	
	// Used to dampen the node's animation. 
	// 0.0 - 1.0, A value of 1 would instantly snap the node to the desired position.
	var dampen = 0.1; 
	
	// Position of focussed node
	var leftXPos = 10;
	var focusYPos = 10;
	var offscreenYPos = 600;
	
	//var maxNodes = 50;
	var maxNodes = 999;
	
	//// SKETCH VARS
	
	// As above, but x will vary
	var focusXPos;
	
	// Font in three weights
	var fontBold, fontRegular, fontLight;
	
	// Collections for the currently active nodes
	var activeArrayForInstants = new Array();
	var activeArrayForIntervals = new Array();

	// Collections for the on-screen nodes
	var nodeDict = new Object(); // Stores all node objects with url as key
	var nodeArray = new Array(); // Node keys in last used order
	addNodeToOnScreenCollections = function(key)
	{
		// Adding...
		if (key in nodeDict)
		{
			// move key to 'most recently used' position, ie beginning, in array
			var index = nodeArray.indexOf(key);
			if (index == -1) 
			{
				console.log("Error: " + key + " in nodeDict but not nodeArray");
			}
			else 
			{
				nodeArray.splice(index, 1);
			}
			nodeArray.unshift(key)
		}
		else
		{
			nodeDict[key] = new Node(leftXPos, offscreenYPos, key);
			nodeArray.unshift(key);
		}
		
		// Auto-Purge...
		while (nodeArray.length > maxNodes)
		{
			var url = nodeArray[maxNodes];
			
			nodeArray.splice(maxNodes,1)
			delete nodeDict[url]
		}
	}
	removeNodeFromOnScreenCollections = function(key)
	{
		var index = nodeArray.indexOf(key);
		
		if (index >= 0)
		{
			console.log("Removing node: " + key)
			nodeArray.splice(index,1)
			delete nodeDict[key]
		}
		else
		{
			console.log("Error: Attempted to remove " + key + " from OnScreenCollections, but key not found");
		}
	}
	
	// PUBLIC METHOD - To be called by video playback when at an instant time
	
	p.triggerObjectWithInstant = function(key)
	{
		// FIXME
		for (var loopKey in nodeDict)
		{
			nodeDict[loopKey].moveRelative(50,0);
		}
	
		// add (and auto-create if necessary) node to on-screen lists
		addNodeToOnScreenCollections(key);
		activeArrayForInstants.unshift(key);
		
		// start animation
		nodeDict[key].moveTo(100,100);
		
		// animate off, slowly, somehow. use activeArrayForInstants to keep the recent thread, push rest to border, put drift function in update if node is an instant?
	}

	// PUBLIC METHOD - To be called by video playback when at an interval time
	
	p.triggerObjectWithInterval = function(key, isBegin)
	{
		if(isBegin)
		{
			// add (and auto-create if necessary) node to on-screen lists
			addNodeToOnScreenCollections(key);
			activeArrayForIntervals.unshift(key);
			
			// start animation
			nodeDict[key].moveTo(100,300);
			
			// flag to add sub nodes
			// TODO
		}
		else
		{
			// remove node from active list and move to holding area
			var index = activeArrayForIntervals.indexOf(key);
		
			if (index >= 0)
			{
				activeArrayForIntervals.splice(index,1);
				moveToHoldingArea(key);
			}
			else
			{
				console.log("Error: Key not found");
			}
		}
	}

	// 	SKETCH METHOD - This animates out (sub) properties of a node
	addSubNodes = function(key)
	{
		console.log("addSubNodes for:" + key)
		if (!(key in window.downloadedObjects)) {console.log("Error: key not downloaded")}
		
		var subjectArraysToAdd = new Array();
		// Loop through properties of node making a list of the ones we want
		for (var predicateKey in window.downloadedObjects[key])
		{
			// Ignore RDF-type, its aggregated into node
			if (predicateKey == "http://www.w3.org/1999/02/22-rdf-syntax-ns#type") {}
			// Ignore text array, its for display in the node
			else if (predicateKey == "text") {}
			// Ignore contextualises, for you'll get every scene a story contextualises
			else if (predicateKey == "http://purl.org/ontology/stories/contextualises") {}
			// Ignore events, for you'll get a long list of them from a story
			else if (predicateKey == "http://purl.org/ontology/stories/events") {}
			else
			{
				// The object for the predicate key should be an array of all this predicate's subjects
				var subjectArray = window.downloadedObjects[key][predicateKey];
				subjectArraysToAdd.push(subjectArray)
			}
		}
		
		// Display
		xOrigin = nodeDict[key].xPos;
		yOrigin = nodeDict[key].yPos + nodeDict[key].height/2;
		for (var i = 0; i < subjectArraysToAdd.length; i++)
		{
			var angle = Math.PI / 5;
			var xOffset = 40 * Math.cos(angle*(i+1));
			var yOffset = 40 * Math.sin(angle*(i+1));
			
			for (var j = 0; j < subjectArraysToAdd[i].length; j++)
			{
				var subjectKey = subjectArraysToAdd[i][j]
				addNodeToOnScreenCollections(subjectKey);
				
				var nodeParent = nodeDict[key];
				var node = nodeDict[subjectKey];
				node.moveTo(xOrigin + xOffset*(i+j+1), yOrigin + yOffset*(i+j+1));
				//console.log(element + " added at " + xOffset + ", " + yOffset);
			}
		}
	}


	//	SKETCH METHOD - This animates a node to somewhere in the 'holding area'
	moveToHoldingArea = function(key)
	{
		// Holding area could be anywhere, right now its a strip at the bottom of the sketch
		var holdWidth = p.width;
		var holdHeight = 100;
		var holdXOrigin = 0;
		var holdYOrigin = p.height - holdHeight;
		
		var node = nodeDict[key];
		
		holdWidth -= Math.max(node.width, 0);
		holdHeight -= Math.max(node.height, 0);
		
		node.moveTo(holdXOrigin + Math.random()*holdWidth, holdYOrigin + Math.random()*holdHeight)
	}

	// SKETCH METHOD - This is triggered when object reaches its desired position
	objectEndsMoveCallback = function(key)
	{
		// Has it been flagged for spawning nodes of its property objects?
		// TODO: if () goes here
		addSubNodes(key);
	}

	//  SKETCH METHOD - This is triggered when object is brought in from triplestore.
	
	// The node should already have been created, so this is the prompt to rejig display now the contents are known
	objectDownloadedCallback = function(key)
	{
		// Is the downloaded object a current node?
		if (key in nodeDict)
		{
			nodeDict[key].initFromDownloadedObjectsData();
		}
		else
		{
			console.log("Error: key not in nodeDict on objectDownloadedCallback");
		}
	}

	//// PROCESSING SETUP METHOD
	
	p.setup = function()
	{
	    p.size(1280, 720);
	  
	  // FIXME: 
	  // Oct'11 - Using native fonts and no performance impact now looks doable. Work out how to load font into the canvas element, so pjs can then pick it up.
	  // This will just use safari's default. Helvetica, could be worse =] No idea about other browsers.
	    fontBold = p.createFont("", 0);
	    fontRegular = p.createFont("", 0);
	    fontLight = p.createFont("", 0);
		
		// Register for notification when object has been downloaded from triplestore
		window.objectDownloadedCallback = objectDownloadedCallback;
	}



		
	//// PROCESSING DRAW METHOD
	
	p.draw = function()
	{
	  p.background(0,0,0,0);
		
	  for (var key in nodeDict)
	  {
	  	nodeDict[key].update();
	  	nodeDict[key].draw();
	  }
	}
	



	//// PROCESSING INPUT EVENT HANDLERS
	
	p.keyPressed = function ()
	{
		// LEFT = We want to back to the previous story event if we haven't pulled up properties to back out of first
		//if (p.keyCode == p.LEFT) p.LEFT worked in processing.js 0.9.6 but not 0.9.7
		if (p.keyCode == 37) 
		{

		}
		
		// RIGHT = We want to go to the next story event if we haven't pulled up properties to back out of first
		//if (p.keyCode == p.RIGHT)
		if (p.keyCode == 39)
		{

		}
		
		// SPACE = Pull up currently selected property
		if (p.key == 32)
		{

		}
		
		// ESC = Go back to last selected property
		// if (p.key == p.ESC)
		if (p.key == 27)
		{

		}
		
		// UP = Select node above
		//if (p.keyCode == p.UP) 
		if (p.keyCode == 38) 
		{

		}
		
		// DOWN = Select node below
		//if (p.keyCode == p.DOWN) 
		if (p.keyCode == 40) 
		{

		}
	}

	


	//// SKETCH CLASSES
	
	// This is an object that just displays a line of text, intended as a single character
	
	function CharNode(x,y, character)
	{
			this.moveTo = function(x,y)
			{
				moveToX = x;
				moveToY = y;
				moving = true;
			}
			
			this.update = function()
			{
				// Animate position
				var xDelta = moveToX - this.xPos;
				var yDelta = moveToY - this.yPos;
				
				// If we're close enough, snap to position rather than multiplying increasingly minute numbers
				var animThreshold = 0.1;
				var stoppedX = Math.abs(xDelta) < animThreshold;
				var stoppedY = Math.abs(yDelta) < animThreshold;
				this.xPos = stoppedX ? moveToX : this.xPos + xDelta*dampen;
				this.yPos = stoppedY ? moveToY : this.yPos + yDelta*dampen;
				
				// Fire sketch finished moving function (better + more flexible to override a function of this class, but expediency bites).
				if (moving && stoppedX && stoppedY)
				{
					moving = false;
					objectEndsMoveCallback(key);
				}
			}
			
			this.draw = function()
			{
				// Draw the node shape
				p.stroke(0);
				p.strokeWeight(3);
				p.fill(255); // while my roundedRect doesn't enclose itself properly
				p.roundedRect(this.xPos, this.yPos, this.width, this.height, radius);
				
				// Write the text on
				p.fill(0);
				var yFontMagicOffset = 28;
				p.textFont(fontBold, textHeaderSize);
				p.text(char, this.xPos + textOffset, this.yPos + yFontMagicOffset);
			}
			
		//// Constructor
			var char = character;

			var radius = 10;
			var padding = 5;
			var textHeaderSize = 28;
			var textBodySize = 18;
						
			this.xPos = x;
			this.yPos = y;
			this.height = textHeaderSize + 2*padding;
			this.width = Math.max(fontBold.width(char)*textHeaderSize, this.height);
			var textOffset = this.width/2 - fontBold.width(char)*textHeaderSize/2;
			
			var moveToX = x;
			var moveToY = y;
			var moving = false;
	}
	
	// NODE CLASS - This is the object that represents a RDF object and its rolled-in properties such as type.
	
	function Node(x, y, objectKey)
	{
		//// Methods
			this.moveTo = function(x,y)
			{
				moveToX = x;
				moveToY = y;
				moving = true;
			}
			
			this.moveRelative = function(x,y)
			{
				moveToX += x;
				moveToY += y;
				moving = true;
			}
			
			this.initFromDownloadedObjectsData = function()
			{
				// Work out maximum width
				this.text = window.downloadedObjects[this.oKey].text;
				
				var longestString = "";
				
				for (var key in this.text)
				{ 
					var thisString = this.text[key].title + this.text[key].text;
					if (thisString.length > longestString.length) longestString = thisString;
				}
				
				var xFontMagicMultiplier = 1.5;
				var maxTextWidth = Math.max(fontRegular.width(longestString)*textBodySize*xFontMagicMultiplier, fontBold.width(this.text.type.title + this.text.type.text)*textHeaderSize*xFontMagicMultiplier);
				
				// Set Width and Height
				this.width = maxTextWidth + 2*padding;
				this.height = padding + textHeaderSize + (this.text.lineCount-1)*textBodySize + padding;
				
				console.log("text for: " + this.oKey)
				console.log(this.text)
			}
			
			this.update = function()
			{
				// Animate position
				var xDelta = moveToX - this.xPos;
				var yDelta = moveToY - this.yPos;
				
				// If we're close enough, snap to position rather than multiplying increasingly minute numbers
				var animThreshold = 0.1;
				var stoppedX = Math.abs(xDelta) < animThreshold;
				var stoppedY = Math.abs(yDelta) < animThreshold;
				this.xPos = stoppedX ? moveToX : this.xPos + xDelta*dampen;
				this.yPos = stoppedY ? moveToY : this.yPos + yDelta*dampen;
				
				// Fire sketch finished moving function (better + more flexible to override a function of this class, but expediency bites).
				if (moving && stoppedX && stoppedY)
				{
					moving = false;
					objectEndsMoveCallback(this.oKey);
				}
			}
	
			this.draw = function(selected)
			{
				// Draw the node outline
				if (selected == true) 
					p.stroke(255,0,0);
				else									
					p.stroke(0);
				p.strokeWeight(3);
				p.fill(255);
				p.roundedRect(this.xPos, this.yPos, this.width, this.height, radius);
				
				// If there is the prettified text, display it.			
				if (this.text)
				{
					p.fill(0);
					
					// Move down with increasing yCurrent
					
					var yCurrent = this.yPos + padding
					
					// Draw title
					
					var yFontMagicOffset = 20;
					
					p.textFont(fontRegular, textHeaderSize);
					p.text(this.text.type.title, this.xPos + padding, yCurrent + yFontMagicOffset);
					p.textFont(fontBold, textHeaderSize);
					p.text(this.text.type.text, this.xPos + padding + fontRegular.width(this.text.type.title)*textHeaderSize, yCurrent + yFontMagicOffset);
					
					yCurrent += textHeaderSize 
										
					// Draw thin line
					
					if (this.text.lineCount > 1)
					{
						p.strokeWeight(2);
						p.line(this.xPos, yCurrent, this.xPos + this.width, yCurrent);
						yCurrent += padding;
					}
					
					// Draw body text in desired order
					
					yFontMagicOffset = 12;
					
					if ('about' in this.text)
					{
						p.textFont(fontLight, textBodySize);
						p.text(this.text.about.title, this.xPos + padding, yCurrent + yFontMagicOffset);
						p.textFont(fontRegular, textBodySize);
						p.text(this.text.about.text, this.xPos + padding + fontRegular.width(this.text.about.title)*textBodySize, yCurrent + yFontMagicOffset);
						yCurrent += textBodySize;
					}
					
					if ('name' in this.text)
					{
						p.textFont(fontLight, textBodySize);
						p.text(this.text.name.title, this.xPos + padding, yCurrent + yFontMagicOffset);
						p.textFont(fontRegular, textBodySize);
						p.text(this.text.name.text, this.xPos + padding + fontRegular.width(this.text.name.title)*textBodySize, yCurrent + yFontMagicOffset);
						yCurrent += textBodySize;
					}
					if ('comment' in this.text)
					{
						p.textFont(fontLight, textBodySize);
						p.text(this.text.comment.title, this.xPos + padding, yCurrent + yFontMagicOffset);
						p.textFont(fontRegular, textBodySize);
						p.text(this.text.comment.text, this.xPos + padding + fontRegular.width(this.text.comment.title)*textBodySize, yCurrent + yFontMagicOffset);
						yCurrent += textBodySize;
					}
				}
			}	
	
		//// Constructor
			this.oKey = objectKey;
			this.xPos = x;
			this.yPos = y;
			this.width = 0;
			this.height = 0;
			
			var moveToX = x;
			var moveToY = y;
			var moving = false;
			
			var radius = 10;
			var padding = 5;
			var textHeaderSize = 28;
			var textBodySize = 18;
			
			this.text = null;
			
			if (objectKey in window.downloadedObjects) 
			{
				this.initFromDownloadedObjectsData();
			}
			else
			{
				subjectQuery(this.oKey);
			}
	}

	
	
	//// SKETCH UTILITIES
	
	
	// COLLECTION CLASS - Its an array that keeps a selected index that should stay in bounds
	
	function SelectedIndexArray()
	{
		this.array = [];
		var index = 0;
		this.selectedIndex = function()
		{
		return index;
		}
		this.push = function(object)
		{
			this.array.push(object);
		}
		this.selectedObject = function()
		{
			if (this.array.length == 0 || index < 0 || index >= this.array.length) {console.log('selectedIndexArray not returning an object'); return null;}
			return this.array[index];
		}
		this.selectionUp = function()
		{
			index = Math.min(index + 1, Math.max(0,this.array.length - 1));
		}
		this.selectionDown = function()
		{
			index = Math.max(index - 1, 0)
		}
		this.reset = function()
		{
			this.array = [];
			index = 0;
		}
	} 
	
	// GRAPHIC ROUTINE - Rounded Rectangle
	
	// processing.js is missing quadratic bezier, needed to draw corners with correct curvature
	// FIXME: Rather than having to declare it, keep prevX & Y in state somehow?
	p.quadraticBezierVertex = function(cpx, cpy, x, y, prevX, prevY) 
	{
	  var cp1x = prevX + 2.0/3.0*(cpx - prevX);
	  var cp1y = prevY + 2.0/3.0*(cpy - prevY);
	  var cp2x = cp1x + (x - prevX)/3.0;
	  var cp2y = cp1y + (y - prevY)/3.0;
	
	  // and now call cubic Bezier curve to function
	  p.bezierVertex(cp1x, cp1y, cp2x, cp2y, x, y);
	};
	
	p.roundedRect = function(x, y, w, h, r) 
	{
	  p.beginShape();
	  p.vertex(x+r, y);
	  p.vertex(x+w-r, y);
		p.quadraticBezierVertex(x+w, y, x+w, y+r, x+w-r, y);
	  p.vertex(x+w, y+h-r);
	  p.quadraticBezierVertex(x+w, y+h, x+w-r, y+h, x+w, y+h-r);
	  p.vertex(x+r, y+h);
	  p.quadraticBezierVertex(x, y+h, x, y+h-r, x+r, y+h);
	  p.vertex(x, y+r);
	  p.quadraticBezierVertex(x, y, x+r, y, x, y+r);
	  p.endShape();
	};
}